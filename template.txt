/*
    || साम्ब-सदाशिव ||

    author: viplove tyagi (@vipplovve).

    the template and code snippets used, if any, have been taken from: -
	
    my repository: https://github.com/vipplovve/TemplateVault
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 

using namespace std;
using namespace chrono;
using namespace __gnu_pbds; 

using str = string;
using ll = long long;
using ld = long double;
const ll MOD = 1e9 + 7;

#define f(variable,s,e,j) for(ll variable = s ; variable < e ; variable+=j)
#define fr(variable,s,e,j) for(ll variable = s ; variable > e ; variable-=j)
#define test(n) while(n--)
#define trav(x,y) for(auto &x : y)
#define yeah cout << "Yes\n"
#define nah cout << "No\n"
#define endl '\n'
#define flushin cout << flush
#define line "------------------------------------------"

#define indexed_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define indexed_map tree<pr<ll,ll>, null_type,less<pr<ll,ll>>, rb_tree_tag,tree_order_statistics_node_update> 

#define vec vector
#define fi first
#define se second
#define pr pair

#define all(a) a.begin(), a.end()
#define allr(a) a.rbegin(), a.rend()

#define MODadd(x,y,m) ((x % m) + (y % m) + m) % m
#define MODsub(x,y,m) ((x % m) - (y % m) + m) % m
#define MODmul(x,y,m) ((x % m) * (y % m)) % m

#define setbits(x) __builtin_popcountll(x)
#define trailzero(x) __builtin_ctz(x)

#ifndef ONLINE_JUDGE
#define debug(value) cerr << #value << " : " << value << endl;
#else
#define debug(value);
#endif

int main()
{
    #ifndef ONLINE_JUDGE
        freopen("errors.err","w",stderr);
    #endif

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    auto beg = high_resolution_clock::now();
    
    // USACO.

    // freopen("filename.in", "r", stdin);
    // freopen("filename.out", "w", stdout);
    
    // The Code's Here.

    auto end = high_resolution_clock::now();

    auto duration = duration_cast <microseconds> (end - beg);
    
    #ifndef ONLINE_JUDGE
        cerr << line << "Time Taken : " << duration.count() / 1000 << " ms." << endl << line;
    #endif

    return 0;
}
